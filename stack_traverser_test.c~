// ASSERT macros for use in test cases, and includes other framework headers.
#include <CUnit/CUnit.h>

// Error handing functions and data types. Included automatically by CUnit.h.
#include <CUnit/CUError.h>	

// Data type definitions and manipulation functions for the test registry, suites, and tests. Included automatically by CUnit.h.
#include <CUnit/TestDB.h>

// Data type definitions and functions for running tests and retrieving results. Included automatically by CUnit.h.
#include <CUnit/TestRun.h>	

// Automated interface with xml output.
#include <CUnit/Automated.h>

// Basic interface with non-interactive output to stdout.
#include <CUnit/Basic.h>

// Interactive console interface.
#include <CUnit/Console.h>

#include <assert.h>
#include <stdlib.h>
#include <stdbool.h>

#include "stack_traverser.h"

int init_suite() {
  return 0;
}

int cleanup_suite() {
  return 0;
}

void test_function() {
  puts("Just for testing.");
}

int main() {
  // create a new heap
  heap_t *new_heap = h_init(1024, true, 100.0);
  
  // allocate on this heap. For testing purposes
  void *ptr = h_alloc_struct(new_heap, "***i"); 

  // Dump pointers from the registers to the stack, if any.
  Dump_registers();
  
  printf("hej d√§r\n");

  // the list contains all alive pointers
  ll_node **root = traverse_stack_list(new_heap); 

  // print the list for debugging purposes
  print_stack_list(root); 

  // Just a test to see how the stack and the heap grow on the platform we're on
  endiannessTest();

  // deletes the heap we created
  h_delete(new_heap);


  // CUnit tests
  CU_pSuite pSuite = NULL;
  
  CU_initialize_registry();

  CU_add_suite("Haubir", init_suite, cleanup_suite);

  CU_add_test(pSuite, "Test", test_function);

  CU_console_run_tests();
  CU_cleanup_registry();
  return 0;
}
